<?php

// $Id$

/**
 * @file facebook.module
 * Add support to Drupal for the Facebook API by using the JavaScript SDK
 *
 * @author Raymond Jelierse
 */

/**
 * Implements hook_menu()
 */
function facebook_menu() {
  return array(
    'admin/settings/facebook' => array(
      'title' => 'Facebook',
      'description' => t('Manage Facebook API settings'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('facebook_settings_form'),
      'access arguments' => array('administer facebook'),
    ),
  );
}

/**
 * Implements hook_perm()
 */
function facebook_perm() {
  return array('administer facebook');
}

/**
 * Implements hook_init()
 */
function facebook_init() {
  $app_id = variable_get('facebook_app_id', NULL);
  $app_secret = variable_get('facebook_app_secret', NULL);
  $access_token = variable_get('facebook_app_access_token', NULL);

  if ($access_token === NULL && ($app_id !== NULL && $app_secret !== NULL)) {
    $request = sprintf('https://graph.facebook.com/oauth/access_token?client_id=%s&client_secret=%s&grant_type=client_credentials', $app_id, $app_secret);
    $c = curl_init($request);
    curl_setopt($c, CURLOPT_RETURNTRANSFER, TRUE);
    curl_setopt($c, CURLOPT_SSL_VERIFYPEER, FALSE);
    $result = curl_exec($c);
    curl_close($c);
    if ($result !== FALSE) {
      parse_str($result);
      variable_set('facebook_app_access_token', $access_token);
      drupal_set_message(t('Updated Facebook Application Access Token'));
    } else {
      drupal_set_message(t('Failed to update Facebook Application Access Token'), 'error');
    }
  }

  // Add support for the Facebook JavaScipt SDK
  drupal_set_html_head('<script type="text/javascript" src="http://connect.facebook.net/en_US/all.js"></script>');

  // Drupal.settings object data
  $settings = array(
    'appId' => $app_id,
    'accessToken' => $access_token,
  );

  drupal_add_js(array('facebook' => $settings), 'setting');
  drupal_add_js(drupal_get_path('module', 'facebook') . '/js/facebook.js');
}

/**
 * Implements hook_footer()
 *
 * Add the JavaScript SDK placeholder here.
 */
function facebook_footer() {
  return '<div id="fb-root"></div>';
}

/**
 * Implements of hook_namespaces()
 */
function facebook_namespaces() {
  return array(
    'fb' => 'http://www.facebook.com/2008/fbml',
  );
}

/**
 * Facebook API settings form.
 */
function facebook_settings_form() {
  return system_settings_form(array(
    'application' => array(
      '#type' => 'fieldset',
      '#title' => t('Application'),
      'facebook_app_id' => array(
        '#type' => 'textfield',
        '#title' => t('Application id'),
        '#default_value' => variable_get('facebook_app_id', ''),
        '#required' => TRUE,
        '#description' => t('To use the Facebook API, you will need to have an application id.'),
      ),
      'facebook_app_secret' => array(
        '#type' => 'textfield',
        '#title' => t('Application secret'),
        '#default_value' => variable_get('facebook_app_secret', ''),
        '#description' => t('To receive access tokens for various actions, an application secret is required. No entering one will limit the functionality of this module.'),
      ),
      'facebook_app_access_token' => array(
        '#type' => 'textfield',
        '#title' => t('Access token'),
        '#value' => variable_get('facebook_app_access_token', ''),
        '#description' => t('This is the access token that has been granted based on the above application id and secret.'),
        '#disabled' => TRUE,
      ),
    ),
    'page' => array(
      '#type' => 'fieldset',
      '#title' => t('Page'),
      'facebook_page' => array(
        '#type' => 'textfield',
        '#title' => t('Page URL'),
        '#default_value' => variable_get('facebook_page', ''),
        '#description' => t('If you want to associate your website with an existing Facebook Page, instead of your website\'s URL, enter the page URL here.'),
      ),
    ),
    'node' => array(
      '#type' => 'fieldset',
      '#title' => t('Like nodes'),
      'facebook_node_like_show_faces' => array(
        '#type' => 'checkbox',
        '#title' => t('Show the faces of the people that like this item.'),
        '#default_value' => variable_get('facebook_node_like_show_faces', TRUE),
      ),
      'facebook_node_like_colorscheme' => array(
        '#type' => 'select',
        '#title' => t('Color scheme'),
        '#options' => array(
          'light' => t('Light'),
          'dark' => t('Dark'),
        ),
        '#default_value' => variable_get('facebook_node_like_colorscheme', 'light'),
      ),
      'facebook_node_like_font' => array(
        '#type' => 'select',
        '#title' => t('Font'),
        '#options' => array(
          'arial' => 'Arial',
          'lucida grande' => 'Lucida Grande',
          'segoe ui' => 'Segoe UI',
          'tahoma' => 'Tahoma',
          'trebuchet ms' => 'Trebuchet MS',
          'verdana' => 'Verdana'
        ),
        '#default_value' => variable_get('facebook_node_like_font', 'lucida grande'),
      ),
      'facebook_node_like_width' => array(
        '#type' => 'textfield',
        '#title' => t('Width'),
        '#default_value' => variable_get('facebook_node_like_width', ''),
      ),
      'facebook_node_like_layout' => array(
        '#type' => 'select',
        '#title' => t('Layout'),
        '#options' => array(
          'standard' => t('Standard'),
          'button_count' => t('Button count'),
          'box_count' => t('Box count'),
        ),
        '#default_value' => variable_get('facebook_node_like_layout', 'standard'),
      ),
      'facebook_node_like_verb' => array(
        '#type' => 'select',
        '#title' => t('Action'),
        '#options' => array(
          'like' => t('Like'),
          'recommend' => t('Recommend'),
        ),
        '#default_value' => variable_get('facebook_node_like_verb', 'like'),
      ),
      'facebook_node_like_share' => array(
        '#type' => 'checkbox',
        '#title' => t('Show an additional Share button.'),
        '#default_value' => variable_get('facebook_node_like_share', FALSE),
      ),
    ),
  ));
}

/**
 * Implements hook_block()
 */
function facebook_block($op = 'list', $delta = 0, $data = array()) {
  include_once drupal_get_path('module', 'facebook') . '/facebook.blocks.inc';

  switch ($op) {
    case 'list':
      return array(
        'events' => array(
          'info' => t('Upcoming events (facebook)'),
        ),
        'like' => array(
          'info' => t('Like (facebook)'),
        ),
      );
    case 'view':
      return call_user_func("facebook_block_{$delta}_view");
    case 'configure':
      return call_user_func("facebook_block_{$delta}_form");
    case 'save':
      return call_user_func("facebook_block_{$delta}_form_submit", $data);
  }
}

/**
 * Implements hook_nodeapi()
 */
function facebook_nodeapi(&$node, $operation, $data1 = NULL, $data2 = NULL) {
  switch ($operation) {
    case 'insert':
      $data = array();
      if (!empty($node->facebook_like_page)) {
        $result = db_query("INSERT INTO {node_facebook_page} VALUES (%d, '%s', %d, '%s')", $node->nid, $node->facebook_like_page, $node->facebook_like_enabled, serialize($data));
      } else {
        $result = db_query("INSERT INTO {node_facebook_page} VALUES (%d, NULL, %d, '%s')", $node->nid, $node->facebook_like_enabled, serialize($data));
      }

      if ($result === FALSE) {
        drupal_set_message('Failed to insert Facebook settings for node');
      }
      break;
    case 'update':
      $data = array();
      if (!empty($node->facebook_like_page)) {
        $result = db_query("UPDATE {node_facebook_page} SET page = '%s', status = %d, data = '%s' WHERE nid = %d", $node->facebook_like_page, $node->facebook_like_enabled, serialize($data), $node->nid);
      } else {
        $result = db_query("UPDATE {node_facebook_page} SET page = NULL, status = %d, data = '%s' WHERE nid = %d", $node->facebook_like_enabled, serialize($data), $node->nid);
      }

      if ($result === FALSE) {
        drupal_set_message('Failed to update Facebook settings for node');
      }
      break;
    case 'delete':
      db_query('DELETE FROM {node_facebook_page} WHERE nid = %d', $node->nid);
      break;
    case 'load':
      $result = db_query("SELECT page, status, data FROM {node_facebook_page} WHERE nid = %d", $node->nid);
      if (($result = db_fetch_array($result)) !== FALSE) {
        $data = array();
        $data['status'] = $result['status'] ? TRUE : FALSE;
        $data['href'] = (!empty($result['page'])) ? $result['page'] : '';
        $node->facebook_like = $data;
      } else {
        $node->facebook_like = array(
          'status' => TRUE,
          'page' => ''
        );
      }
      $node->facebook_like['show_faces'] = variable_get('facebook_node_like_show_faces', TRUE);
      $node->facebook_like['colorscheme'] = variable_get('facebook_node_like_colorscheme', 'light');
      $node->facebook_like['font'] = variable_get('facebook_node_like_font', 'lucida grande');
      $node->facebook_like['width'] = variable_get('facebook_node_like_width', '');
      $node->facebook_like['layout'] = variable_get('facebook_node_like_layout', 'standard');
      $node->facebook_like['action'] = variable_get('facebook_node_like_verb', 'like');
      $node->facebook_like['share'] = variable_get('facebook_node_like_share', FALSE);
      break;
    case 'view':
      if (empty($node->facebook_like) || $node->facebook_like['status']) {
        $node->content['facebook_like'] = array(
          '#value' => theme('like_button', 'button', (empty($node->facebook_like)) ? array() : $node->facebook_like),
          '#weight' => 1,
        );
        $node->facebook_like_rendered = drupal_render($node->content['facebook_like']);
      }
      break;
  }
}

/**
 * Implements hook_form_alter()
 */
function facebook_form_alter(&$form, $form_state, $form_id) {
  if (isset($form['#id']) && $form['#id'] == 'node-form') {
    $node = $form['#node'];

    $form['facebook_like'] = array(
      '#type' => 'fieldset',
      '#title' => t('Facebook Like'),
      '#collapsible' => TRUE,
      'facebook_like_enabled' => array(
        '#type' => 'checkbox',
        '#title' => t('Enable Like button'),
        '#default_value' => ($node->facebook_like === FALSE) ? TRUE : $node->facebook_like['status'],
      ),
      'facebook_like_page' => array(
        '#type' => 'textfield',
        '#title' => t('Page to like'),
        '#default_value' => $node->facebook_like['href'],
        '#description' => t('You can use this to override the URL of the page that should be liked on Facebook. By default, when the Like button is clicked, the current page is liked.'),
      ),
    );
  }
}

/**
 * Implements hook_theme()
 */
function facebook_theme() {
  return array(
    'like_button' => array(
      'arguments' => array('type' => NULL, 'attributes' => NULL),
    ),
  );
}

/**
 * Theme the Facebook Like button
 */
function theme_like_button($type = 'button', $attributes = array()) {
  // Set the accepted attributes for the Like button and Like Box.
  $accepted_attributes = array(
    'href',
    'show_faces',
    'colorscheme',
    'font',
    'width'
  );

  switch ($type) {
    case 'button':
      $accepted_attributes[] = 'layout';
      $accepted_attributes[] = 'action';
      $accepted_attributes[] = 'share';
      $tag = 'fb:like';
      break;
    case 'box':
      $accepted_attributes[] = 'header';
      $accepted_attributes[] = 'stream';
      $accepted_attributes[] = 'border_color';
      $tag = 'fb:like-box';
      break;
  }

  // Generate XFBML
  $content = "<$tag";
  foreach ($attributes as $name => $value) {
    if (empty($value) || !in_array($name, $accepted_attributes)) {
      continue;
    }

    if (is_bool($value)) {
      $value = ($value) ? 'true' : 'false';
    }

    $content .= sprintf(' %s="%s"', $name, check_plain($value));
  }
  $content .= "></$tag>";

  return $content;
}